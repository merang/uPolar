
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "uPolar"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "uPolar-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('uPolar')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("uPolar")
> ### * uPolar
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: uPolar
> ### Title: uPolar An Interactive 2D Visualization Tool for Microscopic
> ###   Time-series Images
> ### Aliases: uPolar
> 
> ### ** Examples
> 
> #   uPolar plot with distance
> #   Data : Time, X, Y
> #   df= read.csv("../data/BC8_tp10_TpTmXY.csv")
> #   uPolar(df,refPoint=NULL,title=NULL,refLine=40,Area=FALSE,aAdjust=1,
> #        zeroAdjust= NULL,track = FALSE,RLS= FALSE)
> 
> 
> #   uPolar plot with distance and area
> #   Data : Time, X, Y, Area
> #   df= read.csv("../data/BC8_tp10_TpTmXYArea.csv")
> #   uPolar(df,refPoint=NULL,title=NULL,refLine=40,Area=TRUE,aAdjust=1,
> #        zeroAdjust= NULL,track = FALSE,RLS= FALSE)
> 
> 
> #   uPolar plot with distance , area , color tag and RLS
> #   Data : Time, X,Y , Area, RLS
> #   df= read.csv("../data/BC8_tp10_TpTmXYAreaRLS.csv")
> #   uPolar(df,refPoint=NULL,title=NULL,refLine=40,Area=FALSE,aAdjust=1,
> #        zeroAdjust= NULL,track = TRUE,RLS= TRUE)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("uPolar", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.121 0.008 0.146 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
